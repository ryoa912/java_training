■練習問題4.5
次の型がインターフェース、抽象クラス、具象クラスのどれで表現すべきかを考えよ。

▼回答
a. N分木のノードを表すTreeNode
⇒抽象クラス
Nと言う部分が抽象的なため、具象クラスではない。
abstractでない通常のメソッドも記述することが考えられることから、インターフェースではなく抽象クラスとすべき。

b. 特定の順番（深さ優先、幅優先など）で木を探索するTreeWalker
⇒抽象クラス
深さ優先、幅優先が決まっていないため、具象クラスではない。
abstractでない通常のメソッドも記述するため、インターフェースではなく抽象クラスとすべき。

c. グラフィックシステムにより描画可能なオブジェクトのためのDrawable
⇒インターフェース
具体的な描画可能なオブジェクトではないため、具象クラスではない。
抽象クラスにすると、複数継承が不可のため、インターフェースとすべき。

d. グラフィックデスクトップから実行できるプログラムのためのApplication
⇒インターフェース
同上。


以下調査内容。
調査すると、abstractとinterfaceどっちを使ったらよいかというまとめ記事がいくつか。

▼抽象クラスとは何か

まさにその名の通り、抽象化されたクラスを指す言葉。抽象化とは、例えば、人間／犬／猫を抽象化する場合には「動物」となるような、共通した項目(簡潔な項目)に置き換えることである。
　
人間クラス／犬クラス／猫クラスが存在する場合、これらは動物クラスを継承して作ることができる、と考えると分かりやすい。
　
つまり、人間クラス／犬クラス／猫クラスを構成するのに必要な最低限の実装が動物クラスには含まれており、これを継承(extends)して内部のメソッドをオーバーライドすることで動物としての共通した機能を持たせつつ、種族によって独自の機能を持った人間クラス／犬クラス／猫クラスを作れるのである。

抽象クラスのルール
抽象クラスのオブジェクト（抽象クラスのインスタンス）を生成することはできない。
抽象メソッドが存在するクラスは必ず抽象クラスとして宣言しなければならない。
抽象クラスには通常のメソッドを記述することもできる。
抽象メソッドがない抽象クラスを作ることもできる。
「抽象メソッドが存在する抽象クラス」を継承したサブクラスでは抽象メソッドをオーバーライドしなければならない。
抽象クラスやクラスを多重継承（一度に複数個を継承）することは出来ない。

▼インターフェースとは何か

インターフェースについて説明する為にはカプセル化という考え方を知っておく必要がある。
　
カプセル化とは「クラス内部の複雑な実装を見なくても、手続きさえ知っていれば外部からクラスを扱えるようにしよう」という考え方のこと。
　
インターフェースはカプセル化の為に用意されたものである。何故かというと、インターフェースさえ見ればクラス内部の実装を見なくてもクラスを扱うことができるからだ。
　
インターフェース内部に記述されたメソッドは、インターフェースを使用しているクラス内部でオーバーライドして実装されることが約束されている。もし、実装されていなかった場合はコンパイルエラーとなる。

インターフェースのルール
インターフェース内では、変数及び、メソッドの宣言のみ行うことが出来る。
インターフェースのオブジェクト（インターフェースのインスタンス）を生成することは出来ない。
インターフェースを実装(implements)したクラスはインターフェース側で宣言されているメソッドを実装しなければならない。
インターフェース内で定義した変数は、定数になり、変更することができない。
Javaはクラスの多重継承を許可しておらず（菱型継承問題のため）、単一継承のみ許可しているが、インターフェース同士での多重継承は許可している。